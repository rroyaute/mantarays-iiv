[
  {
    "objectID": "outputs/quarto/mantarays-sims.html",
    "href": "outputs/quarto/mantarays-sims.html",
    "title": "Simulations for individual differences in group foraging in manta rays",
    "section": "",
    "text": "Rationale\nTODO\n\n\nPackages Necessary\n\n# Make sure to have these packages installed before runnig the code below\nlibrary(tidyverse);  library(here); library(kableExtra); library(lme4)\nlibrary(brms); library(rptR); library(partR2); library(easystats)\nlibrary(ordinal); library(ggdist); library(tidyverse); library(ggthemes)\nlibrary(patchwork)\n\n\n\nSimulate variation in leadership preferences\n\nSetup and individual assignment to foraging groups\nWe imagine a closed population of 100 mantas observed foraging in 100 instances. For simplicity, lets say that mantas always forage in groups of 10 individuals but the identity of each individual present in a given group shifts from observation to observation.\n\n\nCode\n# Seed for reproducible simulation\nset.seed(42) \n\n# Value storage\nN_ID = 100\nN_obs = 100\nGroup_size = 10\n# Dataset structure\ndfsim = data.frame(Obs = rep(1:N_obs, each = N_ID),\n                   Id = rep(1:N_ID, N_obs), \n                   # Sample integers from 1 to 10 and repeat 100 times\n                   Group = rep(sample.int(n = Group_size, size = Group_size,\n                                          replace = F), N_obs),\n                   Group_N = 10) %&gt;% \n  mutate(Group_ID = paste(Group, Obs, sep = \"_\"))\ndfsim %&gt;% head(15) %&gt;% kable()\n\n\n\n\n\nObs\nId\nGroup\nGroup_N\nGroup_ID\n\n\n\n\n1\n1\n1\n10\n1_1\n\n\n1\n2\n5\n10\n5_1\n\n\n1\n3\n10\n10\n10_1\n\n\n1\n4\n8\n10\n8_1\n\n\n1\n5\n2\n10\n2_1\n\n\n1\n6\n4\n10\n4_1\n\n\n1\n7\n6\n10\n6_1\n\n\n1\n8\n9\n10\n9_1\n\n\n1\n9\n7\n10\n7_1\n\n\n1\n10\n3\n10\n3_1\n\n\n1\n11\n1\n10\n1_1\n\n\n1\n12\n5\n10\n5_1\n\n\n1\n13\n10\n10\n10_1\n\n\n1\n14\n8\n10\n8_1\n\n\n1\n15\n2\n10\n2_1\n\n\n\n\n\n\n\nCode\n# Save data \nwrite.csv2(dfsim, here(\"data/data_sim.csv\"))\n\n\nWe now have each individual assigned to a foraging group. We then need to figure out a way to assign ranks corresponding to an individual’s position within the group (1: at the front, 2: second from the front, …).\n\n\nIndividual preference for position in group\nThe simplest way to rank individuals is to give them a preference score for belonging to the front or not according to a normal distribution. Here, we assume that this preference is sampled from a normal distribution of mean 0 and a standard deviation of 1 (\\(N(0, 1)\\)). We can store this information in a dataframe format\n\n\nCode\n# Seed for reproducible simulation\nset.seed(42) \n\nID = data.frame(Id = 1:N_ID) %&gt;% \n  mutate(pref = rnorm(n(), 0, 1))\n\n\nWe then merge the column pref into the dfsim dataframe\n\n\nCode\ndfsim = merge(dfsim, ID)\n\n\nBased on this preference score, we assign a rank to each individuals within each foraging observation and group. Because the way the rank() function works, individuals with the most negative value are more likely to get a lower rank value.\n\n\nCode\nset.seed(42) \n\ndfsim = dfsim %&gt;% \n  group_by(Group_ID) %&gt;% \n  mutate(rank = rank(pref)) %&gt;% \n  arrange(Obs, Group) %&gt;% \n  ungroup()\ndfsim %&gt;% head(15) %&gt;% kable()\n\n\n\n\n\nId\nObs\nGroup\nGroup_N\nGroup_ID\npref\nrank\n\n\n\n\n1\n1\n1\n10\n1_1\n1.3709584\n8\n\n\n11\n1\n1\n10\n1_1\n1.3048697\n7\n\n\n21\n1\n1\n10\n1_1\n-0.3066386\n3\n\n\n31\n1\n1\n10\n1_1\n0.4554501\n6\n\n\n41\n1\n1\n10\n1_1\n0.2059986\n4\n\n\n51\n1\n1\n10\n1_1\n0.3219253\n5\n\n\n61\n1\n1\n10\n1_1\n-0.3672346\n2\n\n\n71\n1\n1\n10\n1_1\n-1.0431189\n1\n\n\n81\n1\n1\n10\n1_1\n1.5127070\n10\n\n\n91\n1\n1\n10\n1_1\n1.3921164\n9\n\n\n5\n1\n2\n10\n2_1\n0.4042683\n8\n\n\n15\n1\n2\n10\n2_1\n-0.1333213\n6\n\n\n25\n1\n2\n10\n2_1\n1.8951935\n10\n\n\n35\n1\n2\n10\n2_1\n0.5049551\n9\n\n\n45\n1\n2\n10\n2_1\n-1.3682810\n1\n\n\n\n\n\n\n\n\n\n\nData analysis\nI’m comparing 3 GLMM distribution families for analyzing individual position in group: - A binomial GLMM where position is bounded by group size - A Poisson GLMM where position is not bounded by group size - A cumulative link GLMM where ranks are considered discrete ordered categories and are bounded by group size\nThe last model is probably the most accurate but is also the most difficult to work with! By comparing those models, my goal is to figure out if a binomial or Poisson GLMM is sufficient to recover the simulated parameter estimates and to properly predict the distribution of ranks within groups. While calculating repeatability for binomial and Poisson GLMM has been well resolved, there are no known formula for the cumulative link GLMM (that I know of!).\n\n\nBinomial GLMM for the probability of leading a foraging groups\n\n\nCode\ndfsim = dfsim %&gt;% \n  mutate(lead = case_when(rank == 1 ~ 1, rank &gt; 1 ~ 0))\n\nglmm.lead = glmer(lead ~ 1 + (1|Id), \n               family = \"binomial\", \n               data = dfsim)\nsummary(glmm.lead)\n\n\nGeneralized linear mixed model fit by maximum likelihood (Laplace\n  Approximation) [glmerMod]\n Family: binomial  ( logit )\nFormula: lead ~ 1 + (1 | Id)\n   Data: dfsim\n\n     AIC      BIC   logLik deviance df.resid \n    39.5     54.0    -17.8     35.5     9998 \n\nScaled residuals: \n      Min        1Q    Median        3Q       Max \n-0.000053 -0.000053 -0.000053 -0.000053  0.004657 \n\nRandom effects:\n Groups Name        Variance Std.Dev.\n Id     (Intercept) 14030    118.4   \nNumber of obs: 10000, groups:  Id, 100\n\nFixed effects:\n            Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept)  -19.688      2.444  -8.056 7.88e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\nCode\nreport_table(glmm.lead)\n\n\nParameter        | Coefficient |           95% CI |     z |      p | Effects | Group | Std. Coef. | Std. Coef. 95% CI |      Fit\n--------------------------------------------------------------------------------------------------------------------------------\n(Intercept)      |      -19.69 | [-24.48, -14.90] | -8.06 | &lt; .001 |   fixed |       |     -19.69 |  [-24.48, -14.90] |         \n                 |      118.45 |                  |       |        |  random |    Id |            |                   |         \n                 |             |                  |       |        |         |       |            |                   |         \nAIC              |             |                  |       |        |         |       |            |                   |    39.53\nAICc             |             |                  |       |        |         |       |            |                   |    39.53\nBIC              |             |                  |       |        |         |       |            |                   |    53.95\nR2 (conditional) |             |                  |       |        |         |       |            |                   |     1.00\nR2 (marginal)    |             |                  |       |        |         |       |            |                   |     0.00\nSigma            |             |                  |       |        |         |       |            |                   |     1.00\nLog_loss         |             |                  |       |        |         |       |            |                   | 2.17e-06\n\n\nCode\nr2(glmm.lead)\n\n\n# R2 for Mixed Models\n\n  Conditional R2: 1.000\n     Marginal R2: 0.000\n\n\n\n\nBinomial GLMM for ranking within foraging groups\n\n\nCode\nglmm.rank.bin = glmer(cbind(rank, Group_N) ~ 1 + (1|Id), \n               family = \"binomial\", \n               data = dfsim)\nsummary(glmm.rank.bin)\n\n\nGeneralized linear mixed model fit by maximum likelihood (Laplace\n  Approximation) [glmerMod]\n Family: binomial  ( logit )\nFormula: cbind(rank, Group_N) ~ 1 + (1 | Id)\n   Data: dfsim\n\n     AIC      BIC   logLik deviance df.resid \n 30416.2  30430.6 -15206.1  30412.2     9998 \n\nScaled residuals: \n      Min        1Q    Median        3Q       Max \n-0.032188 -0.005681  0.002057  0.005625  0.007396 \n\nRandom effects:\n Groups Name        Variance Std.Dev.\n Id     (Intercept) 0.4754   0.6895  \nNumber of obs: 10000, groups:  Id, 100\n\nFixed effects:\n            Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept) -0.78954    0.06928   -11.4   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\nCode\nreport_table(glmm.rank.bin)\n\n\nCan't calculate log-loss.\nCan't calculate proper scoring rules for models without integer response values.\n\n\nParameter        | Coefficient |         95% CI |      z |      p | Effects | Group | Std. Coef. | Std. Coef. 95% CI |      Fit\n-------------------------------------------------------------------------------------------------------------------------------\n(Intercept)      |       -0.79 | [-0.93, -0.65] | -11.40 | &lt; .001 |   fixed |       |      -0.79 |    [-0.93, -0.65] |         \n                 |        0.69 |                |        |        |  random |    Id |            |                   |         \n                 |             |                |        |        |         |       |            |                   |         \nAIC              |             |                |        |        |         |       |            |                   | 30416.16\nAICc             |             |                |        |        |         |       |            |                   | 30416.16\nBIC              |             |                |        |        |         |       |            |                   | 30430.58\nR2 (conditional) |             |                |        |        |         |       |            |                   |     0.13\nR2 (marginal)    |             |                |        |        |         |       |            |                   |     0.00\nSigma            |             |                |        |        |         |       |            |                   |     1.00\n\n\nCode\ncheck_model(glmm.rank.bin)\n\n\n\n\n\n\n\nPoisson GLMM for ranking within foraging groups\n\n\nCode\nglmm.rank.poiss = glmer(rank ~ 1 + (1|Id), \n               family = \"poisson\", \n               data = dfsim)\nsummary(glmm.rank.poiss)\n\n\nGeneralized linear mixed model fit by maximum likelihood (Laplace\n  Approximation) [glmerMod]\n Family: poisson  ( log )\nFormula: rank ~ 1 + (1 | Id)\n   Data: dfsim\n\n     AIC      BIC   logLik deviance df.resid \n 34608.4  34622.8 -17302.2  34604.4     9998 \n\nScaled residuals: \n      Min        1Q    Median        3Q       Max \n-0.030633 -0.004974  0.001646  0.004199  0.005237 \n\nRandom effects:\n Groups Name        Variance Std.Dev.\n Id     (Intercept) 0.4764   0.6902  \nNumber of obs: 10000, groups:  Id, 100\n\nFixed effects:\n            Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept)  1.51255    0.06928   21.83   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\nCode\nreport_table(glmm.rank.poiss)\n\n\nParameter        | Coefficient |       95% CI |     z |  df |      p | Effects | Group | Std. Coef. | Std. Coef. 95% CI |      Fit\n----------------------------------------------------------------------------------------------------------------------------------\n(Intercept)      |        1.51 | [1.38, 1.65] | 21.83 | Inf | &lt; .001 |   fixed |       |       1.51 |      [1.38, 1.65] |         \n                 |        0.69 |              |       |     |        |  random |    Id |            |                   |         \n                 |             |              |       |     |        |         |       |            |                   |         \nAIC              |             |              |       |     |        |         |       |            |                   | 34608.40\nAICc             |             |              |       |     |        |         |       |            |                   | 34608.40\nBIC              |             |              |       |     |        |         |       |            |                   | 34622.82\nR2 (conditional) |             |              |       |     |        |         |       |            |                   |     0.71\nR2 (marginal)    |             |              |       |     |        |         |       |            |                   |     0.00\nSigma            |             |              |       |     |        |         |       |            |                   |     1.00\n\n\nCode\ncheck_model(glmm.rank.poiss)\n\n\n\n\n\n\n\nCumulative Link Mixed Model for ranking within foraging groups\n\n\nCode\ndfsim$rank.f = as.factor(dfsim$rank)\nclmm.rank = clmm(rank.f ~ 1 + (1|Id), data = dfsim, threshold = \"equidistant\")\nclmm.rank\n\n\nCumulative Link Mixed Model fitted with the Laplace approximation\n\nformula: rank.f ~ 1 + (1 | Id)\ndata:    dfsim\n\n link  threshold   nobs  logLik  AIC    niter      max.grad\n logit equidistant 10000 -212.26 430.51 359(12896) 2.58e+03\n\nRandom effects:\n Groups Name        Variance Std.Dev.\n Id     (Intercept) 234740   484.5   \nNumber of groups:  Id 100 \n\nNo Coefficients\n\nThresholds:\nthreshold.1     spacing \n     -65.48       31.43 \n\n\n\n\nCode\nbrms.rank = brm(rank ~ 1 + (1|Id), \n                data = dfsim,\n                family = \"cumulative\",\n                cores = 4, \n                threads = 4, \n                iter = 500,\n                seed = 42,\n                backend = \"cmdstanr\", \n                file = here(\"outputs/mods/brms.rank\"))\n\n\n\n\nCode\nreport_table(brms.rank)\n\n\nParameter     |  Median |             95% CI |     pd |  Rhat |    ESS | Std. Median |  Std_Median 95% CI |   Fit\n-----------------------------------------------------------------------------------------------------------------\nIntercept[1]  | -194.77 | [-285.00, -130.76] |   100% | 1.058 |  75.00 |     -194.77 | [-285.00, -130.76] |      \nIntercept[2]  | -121.85 | [-184.04,  -77.23] |   100% | 1.071 |  54.00 |     -121.85 | [-184.04,  -77.23] |      \nIntercept[3]  |  -70.39 | [-119.92,  -33.40] |   100% | 1.083 |  47.00 |      -70.39 | [-119.92,  -33.40] |      \nIntercept[4]  |  -30.05 | [ -69.83,    0.42] | 96.70% | 1.075 |  38.00 |      -30.05 | [ -69.83,    0.42] |      \nIntercept[5]  |    0.61 | [ -30.09,   30.00] | 55.90% | 1.087 |  32.00 |        0.61 | [ -30.09,   30.00] |      \nIntercept[6]  |   34.45 | [   0.48,   70.20] | 98.10% | 1.089 |  35.00 |       34.45 | [   0.48,   70.20] |      \nIntercept[7]  |   75.55 | [  37.45,  125.73] |   100% | 1.060 |  52.00 |       75.55 | [  37.45,  125.73] |      \nIntercept[8]  |  127.41 | [  87.55,  193.92] |   100% | 1.058 |  86.00 |      127.41 | [  87.55,  193.92] |      \nIntercept[9]  |  201.63 | [ 145.40,  310.46] |   100% | 1.030 | 141.00 |      201.63 | [ 145.40,  310.46] |      \n              |         |                    |        |       |        |             |                    |      \nELPD          |         |                    |        |       |        |             |                    | -5.52\nLOOIC         |         |                    |        |       |        |             |                    | 11.05\nWAIC          |         |                    |        |       |        |             |                    | 11.05\nR2            |         |                    |        |       |        |             |                    |  1.00\nR2 (marginal) |         |                    |        |       |        |             |                    |  0.00\nSigma         |         |                    |        |       |        |             |                    |  1.00\n\n\nCode\npp_check(brms.rank, ndraws = 100)\n\n\n\n\n\n\n\nComparing repeatability between Binomial and Poisson GLMM\n\n\nCode\nrpt.bin = rpt(formula = cbind(rank, Group_N) ~ 1 + (1|Id), \n              grname = \"Id\", \n              datatype = \"Proportion\", \n              data = dfsim)\nrpt.poiss = rpt(formula = rank ~ 1 + (1|Id), \n              grname = \"Id\", \n              datatype = \"Poisson\", \n              data = dfsim)\n# Save models to avoid rerunning later\nsaveRDS(object = rpt.bin, file = here(\"outputs/mods/rpt.bin.rds\"))\nsaveRDS(object = rpt.poiss, file = here(\"outputs/mods/rpt.poiss.rds\"))\n\n\n\n\nCode\nplot(rpt.bin); plot(rpt.poiss)\n\n\n\n\n\n\n\n\n\n\nComparing repeatability and variance components between groups\n\n\nCode\n# Make a fake sex column where half individuals get assigned as females and the other half as males\nID$Sex &lt;- as.factor(c(rep(\"F\", nrow(ID)/2),\n                      rep(\"M\", nrow(ID)/2)))\ndfsim = merge(dfsim, ID)\n\n\n\nEstimate repeatability by sex\n\n\nCode\nrpt.f = rpt(formula = rank ~ 1 + (1|Id), \n              grname = \"Id\", \n              datatype = \"Poisson\", \n              data = subset(dfsim, Sex == \"F\"))\nrpt.m = rpt(formula = rank ~ 1 + (1|Id), \n              grname = \"Id\", \n              datatype = \"Poisson\", \n              data = subset(dfsim, Sex == \"M\"))\nsaveRDS(rpt.R.f, here(\"outputs/mods/rpt.R.f.rds\"))\nsaveRDS(rpt.R.m, here(\"outputs/mods/rpt.R.m.rds\"))\n\n\nThis code store the values for repeatability into an rpt object. We can access the numeric values of each bootstrap from within the R_boot column and plot the distribution or the distribution for the difference between each sexes.\n\n\nCode\n# Inspect rpt objects\nsummary(rpt.R.f)\n\n\n\nRepeatability estimation using glmer method\n\nCall = rpt(formula = rank ~ 1 + (1 | Id), grname = \"Id\", data = subset(dfsim, Sex == \"F\"), datatype = \"Poisson\")\n\nData: 5000 observations\n----------------------------------------\n\nId (50 groups)\n\nRepeatability estimation overview: \n          R     SE   2.5%  97.5% P_permut\nOrg   0.763 0.0588  0.626  0.855       NA\nLink  0.733 0.0527  0.612  0.819       NA\n\n\nBootstrapping: \n          N   Mean Median   2.5%  97.5%\nOrg    1000  0.754  0.759  0.626  0.855\nLink   1000  0.725  0.729  0.612  0.819\n\nPermutation test: \n          N   Mean Median   2.5%  97.5% P_permut\nOrg       1     NA     NA     NA     NA       NA\nLink      1     NA     NA     NA     NA       NA\n\nLikelihood ratio test: \nlogLik full model = -8485.557\nlogLik red. model = -12330.67\nD  = 7690, df = 1, P = 0\n\n----------------------------------------\n\n\nCode\nsummary(rpt.R.m)\n\n\n\nRepeatability estimation using glmer method\n\nCall = rpt(formula = rank ~ 1 + (1 | Id), grname = \"Id\", data = subset(dfsim, Sex == \"M\"), datatype = \"Poisson\")\n\nData: 5000 observations\n----------------------------------------\n\nId (50 groups)\n\nRepeatability estimation overview: \n          R     SE   2.5%  97.5% P_permut\nOrg   0.773 0.0556  0.650  0.867       NA\nLink  0.744 0.0506  0.635  0.832       NA\n\n\nBootstrapping: \n          N   Mean Median   2.5%  97.5%\nOrg    1000  0.768  0.774  0.650  0.867\nLink   1000  0.741  0.747  0.635  0.832\n\nPermutation test: \n          N   Mean Median   2.5%  97.5% P_permut\nOrg       1     NA     NA     NA     NA       NA\nLink      1     NA     NA     NA     NA       NA\n\nLikelihood ratio test: \nlogLik full model = -8816.137\nlogLik red. model = -12371.38\nD  = 7110, df = 1, P = 0\n\n----------------------------------------\n\n\nCode\nplot(rpt.R.f, grname=\"Id\", type=\"boot\", cex.main=0.8, col = \"#ECEFF4\")\n\n\n\n\n\nCode\nplot(rpt.R.m, grname=\"Id\", type=\"boot\", cex.main=0.8, col = \"#ECEFF4\")\n\n\n\n\n\nCode\n# plot deltaR as R_f - R_m\nhist(rpt.R.f$R_boot_link$Id-rpt.R.m$R_boot_link$Id)\n\n\n\n\n\n\n\nEstimate among and within-individual variance by sex\nTo get the among and within-individual variances, we need to rerun the rpt function, this time specifying that we want to extract the variance rather than the repeatablities. This can be done by setting the ratio argument to `ratio = F``\n\n\nCode\nrpt.V.f &lt;- rpt(formula = rank ~ 1 + (1|Id), \n           grname = c(\"Id\", \"Residual\"), \n           datatype = c(\"Poisson\"), \n           data = subset(dfsim, Sex == \"F\"),\n           ratio = FALSE)\nrpt.V.m &lt;- rpt(formula = rank ~ 1 + (1|Id), \n           grname = c(\"Id\", \"Residual\"), \n           datatype = \"Poisson\", \n           data = subset(dfsim, Sex == \"M\"),\n           ratio = FALSE)\n\nsaveRDS(rpt.V.f, here(\"outputs/mods/rpt.V.f.rds\"))\nsaveRDS(rpt.V.m, here(\"outputs/mods/rpt.V.m.rds\"))\n\n\n\n\nCode\n# Plot Vi\nplot(rpt.V.f, grname=\"Id\", type=\"boot\", cex.main=0.8, col = \"#ECEFF4\")\n\n\n\n\n\nCode\nplot(rpt.V.m, grname=\"Id\", type=\"boot\", cex.main=0.8, col = \"#ECEFF4\")\n\n\n\n\n\nCode\n# plot deltaVi as Vi_f - Vi_m\nhist(rpt.V.f$R_boot_link$Id-rpt.V.m$R_boot_link$Id)\n\n\n\n\n\nCode\n# Median and 95 % CIs for deltaR\nmedian(rpt.V.f$R_boot_link$Id-rpt.V.m$R_boot_link$Id)\n\n\n[1] 0.02190272\n\n\nCode\nquantile(((rpt.V.f$R_boot_link$Id-rpt.V.m$R_boot_link$Id)), c(.025, .5, .975))\n\n\n       2.5%         50%       97.5% \n-0.24663560  0.02190272  0.28749063 \n\n\nCode\n# Plot VR\nplot(rpt.V.f, grname=\"Residual\", type=\"boot\", cex.main=0.8, col = \"#ECEFF4\")\n\n\n\n\n\nCode\nplot(rpt.V.m, grname=\"Residual\", type=\"boot\", cex.main=0.8, col = \"#ECEFF4\")\n\n\n\n\n\nCode\n# plot deltaVw as Vw_f - Vw_m\nhist(rpt.V.f$R_boot_link$Residual-rpt.V.m$R_boot_link$Residual)\n\n\n\n\n\n\n\nCombining all elements into a nice plot\n\n\nCode\n# Store all vectors of bootstrapped values\nVi_f &lt;- rpt.V.f$R_boot_link$Id\nVi_m &lt;- rpt.V.m$R_boot_link$Id\nVR_f &lt;- rpt.V.f$R_boot_link$Residual\nVR_m &lt;- rpt.V.m$R_boot_link$Residual\nR_f &lt;- rpt.R.f$R_boot_link$Id\nR_m &lt;- rpt.R.m$R_boot_link$Id\n\ndf &lt;- data.frame(Vi = c(Vi_f, Vi_m),\n                 VR = c(VR_f, VR_m),\n                 R = c(R_f, R_m),\n                 Sex = c(rep(\"F\", length(Vi_f)),\n                         rep(\"M\", length(Vi_m)))) \n# Store effect sizes\ndf.2  &lt;- data.frame(delta_R = R_f - R_m,\n                    delta_Vi = Vi_f - Vi_m,\n                    delta_VR = VR_f - VR_m)\n\np1 &lt;- df %&gt;% \n  ggplot(aes(x = Vi, y = Sex, fill = Sex)) +\n  stat_halfeye() + \n  scale_fill_wsj() +\n  theme_bw()\np2 &lt;- df %&gt;% \n  ggplot(aes(x = VR, y = Sex, fill = Sex)) +\n  stat_halfeye() + \n  scale_fill_wsj() +\n  theme_bw()\np3 &lt;- df %&gt;% \n  ggplot(aes(x = R, y = Sex, fill = Sex)) +\n  stat_halfeye() + \n  scale_fill_wsj() +\n  theme_bw()\np1+p2+p3 + plot_layout(ncol = 1)\n\n\n\n\n\nCode\np4 &lt;- df.2 %&gt;% \n  ggplot(aes(x = delta_Vi, y = 0)) +\n  stat_halfeye() +\n  theme_bw()\np5 &lt;- df.2 %&gt;% \n  ggplot(aes(x = delta_VR, y = 0)) +\n  stat_halfeye() +\n  theme_bw()\np6 &lt;- df.2 %&gt;% \n  ggplot(aes(x = delta_R, y = 0)) +\n  stat_halfeye() +\n  theme_bw()\n\np1 &lt;- p1 + inset_element(p4, left = 0.6, bottom = 0.6, right = 1, top = 1) \np2 &lt;- p2 + inset_element(p5, left = 0.6, bottom = 0.6, right = 1, top = 1) \np3 &lt;- p3 + inset_element(p6, left = 0.6, bottom = 0.6, right = 1, top = 1)\np1 / p2 / p3"
  }
]